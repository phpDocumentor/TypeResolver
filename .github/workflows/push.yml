on:
  push:
    branches:
      - 1.x
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:
name: Qa workflow
env:
  phiveGPGKeys: 4AA394086372C20A,D2CCAC42F6295E7D,E82B2FB314E9906E,8A03EA3B385DBAA1
jobs:
  composer-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: composer
        uses: docker://composer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: install --no-interaction --prefer-dist --optimize-autoloader

      - name: composer-require-checker
        uses: docker://phpga/composer-require-checker-ga
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: check --config-file ./composer-require-config.json composer.json

  phpunit-with-coverage:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.3
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          coverage: pcov
          tools: phive

      - name: Install PHAR dependencies
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: phive --no-progress install --copy --trust-gpg-keys ${{ env.phiveGPGKeys }} --force-accept-unsigned

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: --optimize-autoloader

      - name: Run PHPUnit
        run: php tools/phpunit

  phpunit:
    name: Unit tests for PHP version ${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        php-versions: ['7.2', '7.3', '7.4', '8.0', '8.1']
    env:
      extensions: mbstring
      key: cache-v1 # can be any string, change to clear the extension cache.

    needs:
      - phpunit-with-coverage

    steps:
      - uses: actions/checkout@v3

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1
          tools: phive

      - name: Install PHAR dependencies
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: phive --no-progress install --copy --trust-gpg-keys ${{ env.phiveGPGKeys }} --force-accept-unsigned

      - name: Install phpunit 8 for php 7.2
        if: matrix.php-versions == '7.2'
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: phive --no-progress install --copy --trust-gpg-keys ${{ env.phiveGPGKeys }} phpunit:^8.5

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: --optimize-autoloader

      - name: Run PHPUnit
        run: php tools/phpunit

  codestyle:
    runs-on: ubuntu-latest
    needs: [phpunit]
    steps:
      - uses: actions/checkout@v3
      - name: composer
        uses: docker://composer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: install --no-interaction --prefer-dist --optimize-autoloader
      - name: Restore/cache vendor folder
        uses: actions/cache@v2
        with:
          path: vendor
          key: all-build-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            all-build-${{ hashFiles('**/composer.lock') }}
            all-build-
      - name: Code style check
        uses: phpDocumentor/coding-standard@latest
        with:
          args: -s

  phpstan:
    runs-on: ubuntu-latest
    needs: [phpunit]
    steps:
      - uses: actions/checkout@v3
      - name: composer
        uses: docker://composer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: install --no-interaction --prefer-dist --optimize-autoloader

      - name: PHPStan
        uses: phpDocumentor/phpstan-ga@0.12.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: analyse src --configuration phpstan.neon

  psalm:
    name: Psalm
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system:
          - ubuntu-latest
        php-versions: ['7.3']
    env:
      extensions: mbstring
      key: cache-v1 # can be any string, change to clear the extension cache.

    needs:
      - phpunit

    steps:
      - uses: actions/checkout@v3

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: --optimize-autoloader

      - name: Run psalm
        run: vendor/bin/psalm.phar

  bc_check:
    name: BC Check
    runs-on: ubuntu-latest
    needs: [phpunit]
    steps:
      - uses: actions/checkout@v3
      - name: fetch tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: composer
        uses: docker://composer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: install --no-interaction --prefer-dist --optimize-autoloader
      - name: Restore/cache vendor folder
        uses: actions/cache@v2
        with:
          path: vendor
          key: all-build-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            all-build-${{ hashFiles('**/composer.lock') }}
            all-build-
      - name: Roave BC Check
        uses: docker://nyholm/roave-bc-check-ga

  profile:
    runs-on: ubuntu-latest
    name: profile
    needs: [phpunit]
    services:
      blackfire:
        image: blackfire/blackfire
        ports:
          - 8707:8707
        env:
          BLACKFIRE_SERVER_ID: "517a7aa6-1ec8-4d29-bff8-dddecf4333de"
          BLACKFIRE_SERVER_TOKEN: "21795bdce7c0b5d24f0ccbb42e2a7518feb5359840752b163652899f927cbf2b"

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.2
          extensions: blackfire
          ini-values: memory_limit=2G, display_errors=On, error_reporting=-1, blackfire.agent_socket=tcp://localhost:8707
          coverage: none

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: --optimize-autoloader

      - name: Install phpbench
        run: |
          composer global require jaapio/phpbench-blackfire:1.x-dev@dev && \
          sudo ln -sf "$(composer -q global config home)"/vendor/bin/phpbench /usr/local/bin/phpbench

      - name: Run phpbench
        run: phpbench run -l blackfire --revs=1 --tag="Build_PR_${{ github.event.number }}"
        env:
          BLACKFIRE_CLIENT_ID: ${{ secrets.BLACKFIRE_CLIENT_ID }}
          BLACKFIRE_CLIENT_TOKEN: ${{ secrets.BLACKFIRE_CLIENT_TOKEN }}
